// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillChallenge.Data;

#nullable disable

namespace SkillChallenge.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250921125302_ArchivedChallenge")]
    partial class ArchivedChallengeMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.Property<int>("ChallengesChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChallengesChallengeId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("ChallengeUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin-123",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "user-456",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillChallenge.Models.ArchivedChallenge", b =>
                {
                    b.Property<int>("ArchivedChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchivedChallengeId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<string>("ChallengeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchivedChallengeId");

                    b.ToTable("ArchivedChallenges");
                });

            modelBuilder.Entity("SkillChallenge.Models.ArchivedChallengeUser", b =>
                {
                    b.Property<int>("ArchivedChallengeUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArchivedChallengeUserId"));

                    b.Property<int?>("ArchivedChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("Placement")
                        .HasColumnType("int");

                    b.Property<int>("RatingChange")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArchivedChallengeUserId");

                    b.HasIndex("ArchivedChallengeId");

                    b.ToTable("ArchivedChallengeUsers");
                });

            modelBuilder.Entity("SkillChallenge.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Music",
                            ImagePath = "images/categories/music.png"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Sport",
                            ImagePath = "images/categories/sport.png"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Food",
                            ImagePath = "images/categories/food.png"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Games",
                            ImagePath = "images/categories/games.png"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Other",
                            ImagePath = "images/categories/other.png"
                        });
                });

            modelBuilder.Entity("SkillChallenge.Models.CategoryRatingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryRatingEntities");
                });

            modelBuilder.Entity("SkillChallenge.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("ChallengeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IsTakenDown")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int");

                    b.Property<bool>("ResultsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotePeriodEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("ChallengeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Challenges");

                    b.HasData(
                        new
                        {
                            ChallengeId = 1,
                            ChallengeName = "Nacksving",
                            CreatedBy = "admin-123",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Lär dig göra ett nacksving",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTakenDown = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfParticipants = 0,
                            ResultsSubmitted = false,
                            SubCategoryId = 3,
                            VotePeriodEnd = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeId = 2,
                            ChallengeName = "Guitar solo",
                            CreatedBy = "admin-123",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn this solo",
                            EndDate = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTakenDown = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfParticipants = 0,
                            ResultsSubmitted = false,
                            SubCategoryId = 1,
                            VotePeriodEnd = new DateTime(2027, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeId = 3,
                            ChallengeName = "Ace",
                            CreatedBy = "user-456",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best aceg",
                            EndDate = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTakenDown = new DateTime(2027, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfParticipants = 0,
                            ResultsSubmitted = false,
                            SubCategoryId = 7,
                            VotePeriodEnd = new DateTime(2027, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ChallengeId = 4,
                            ChallengeName = "Recepie",
                            CreatedBy = "user-456",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Best original recepie",
                            EndDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsTakenDown = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NumberOfParticipants = 0,
                            ResultsSubmitted = false,
                            SubCategoryId = 5,
                            VotePeriodEnd = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SkillChallenge.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            SubCategoryId = 1,
                            CategoryId = 1,
                            ImagePath = "images/categories/music.png",
                            SubCategoryName = "Guitar"
                        },
                        new
                        {
                            SubCategoryId = 2,
                            CategoryId = 1,
                            ImagePath = "images/categories/music.png",
                            SubCategoryName = "Vocals"
                        },
                        new
                        {
                            SubCategoryId = 3,
                            CategoryId = 2,
                            ImagePath = "images/categories/sport.png",
                            SubCategoryName = "Wrestling"
                        },
                        new
                        {
                            SubCategoryId = 4,
                            CategoryId = 2,
                            ImagePath = "images/categories/sport.png",
                            SubCategoryName = "Football"
                        },
                        new
                        {
                            SubCategoryId = 5,
                            CategoryId = 3,
                            ImagePath = "images/categories/food.png",
                            SubCategoryName = "Recepies"
                        },
                        new
                        {
                            SubCategoryId = 6,
                            CategoryId = 3,
                            ImagePath = "images/categories/food.png",
                            SubCategoryName = "Baking"
                        },
                        new
                        {
                            SubCategoryId = 7,
                            CategoryId = 4,
                            ImagePath = "images/categories/games.png",
                            SubCategoryName = "Counter-Strike"
                        },
                        new
                        {
                            SubCategoryId = 8,
                            CategoryId = 4,
                            ImagePath = "images/categories/games.png",
                            SubCategoryName = "Chess"
                        },
                        new
                        {
                            SubCategoryId = 9,
                            CategoryId = 5,
                            ImagePath = "images/categories/other.png",
                            SubCategoryName = "Home design"
                        },
                        new
                        {
                            SubCategoryId = 10,
                            CategoryId = 5,
                            ImagePath = "images/categories/other.png",
                            SubCategoryName = "Clothes"
                        },
                        new
                        {
                            SubCategoryId = 11,
                            CategoryId = 5,
                            ImagePath = "images/subcategories/cat.png",
                            SubCategoryName = "Other"
                        });
                });

            modelBuilder.Entity("SkillChallenge.Models.SubCategoryRatingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryRatingEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryRatingEntityId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("SubCategoryRatingEntities");
                });

            modelBuilder.Entity("SkillChallenge.Models.UploadedResult", b =>
                {
                    b.Property<int>("UploadedResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UploadedResultId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UploadedResultId");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UploadedResults");
                });

            modelBuilder.Entity("SkillChallenge.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-123",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "STATIC-ADMIN-CONCURRENCY-STAMP",
                            Email = "john_praesto@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN_PRAESTO@HOTMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKQDRjO0QissdKacQsQZ2Y1zSJc3ZLNbEbCSfwKwBAX0WOoLI0gqJo/T76Yu6SvbDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "STATIC-ADMIN-SECURITY-STAMP",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = "user-456",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "STATIC-USER-CONCURRENCY-STAMP",
                            Email = "test@skillchallenge.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@SKILLCHALLENGE.COM",
                            NormalizedUserName = "TESTUSER",
                            PasswordHash = "AQAAAAIAAYagAAAAECPJaSFhPkxbqX8QWGU013AN7zVInxVWKQ92xSKUPYH5LK7TTPhZQLFCAmjFOEKumg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "STATIC-USER-SECURITY-STAMP",
                            TwoFactorEnabled = false,
                            UserName = "testuser"
                        });
                });

            modelBuilder.Entity("SkillChallenge.Models.VoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int");

                    b.Property<int>("UploadedResultId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedResultId");

                    b.ToTable("VoteEntities");
                });

            modelBuilder.Entity("ChallengeUser", b =>
                {
                    b.HasOne("SkillChallenge.Models.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillChallenge.Models.ArchivedChallengeUser", b =>
                {
                    b.HasOne("SkillChallenge.Models.ArchivedChallenge", null)
                        .WithMany("Users")
                        .HasForeignKey("ArchivedChallengeId");
                });

            modelBuilder.Entity("SkillChallenge.Models.CategoryRatingEntity", b =>
                {
                    b.HasOne("SkillChallenge.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillChallenge.Models.User", null)
                        .WithMany("CategoryRatingEntities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SkillChallenge.Models.Challenge", b =>
                {
                    b.HasOne("SkillChallenge.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SkillChallenge.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("SkillChallenge.Models.SubCategory", b =>
                {
                    b.HasOne("SkillChallenge.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SkillChallenge.Models.SubCategoryRatingEntity", b =>
                {
                    b.HasOne("SkillChallenge.Models.CategoryRatingEntity", null)
                        .WithMany("SubCategoryRatingEntities")
                        .HasForeignKey("CategoryRatingEntityId");

                    b.HasOne("SkillChallenge.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("SkillChallenge.Models.UploadedResult", b =>
                {
                    b.HasOne("SkillChallenge.Models.Challenge", "Challenge")
                        .WithMany("UploadedResults")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillChallenge.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillChallenge.Models.VoteEntity", b =>
                {
                    b.HasOne("SkillChallenge.Models.UploadedResult", null)
                        .WithMany("Votes")
                        .HasForeignKey("UploadedResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillChallenge.Models.ArchivedChallenge", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SkillChallenge.Models.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("SkillChallenge.Models.CategoryRatingEntity", b =>
                {
                    b.Navigation("SubCategoryRatingEntities");
                });

            modelBuilder.Entity("SkillChallenge.Models.Challenge", b =>
                {
                    b.Navigation("UploadedResults");
                });

            modelBuilder.Entity("SkillChallenge.Models.UploadedResult", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("SkillChallenge.Models.User", b =>
                {
                    b.Navigation("CategoryRatingEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
